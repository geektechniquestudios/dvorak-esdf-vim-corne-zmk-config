/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

&sk {
    release-after-ms = <2000>;
    quick-release;
};

/ {

    macros {
        scrnrt: screen_right {
            label = "SCREEN_RIGHT";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            bindings
                = <&macro_press &kp LGUI &kp LCTRL>
                , <&macro_tap &kp RIGHT>
                , <&macro_release &kp LGUI &kp LCTRL>
                ;
        };
        scrnlft: screen_left {
            label = "SCREEN_LEFT";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            bindings
                = <&macro_press &kp LGUI &kp LCTRL>
                , <&macro_tap &kp LEFT>
                , <&macro_release &kp LGUI &kp LCTRL>
                ;
        };
        taskmngr: ctrl_shft_esc {
            label = "TASK_MANAGER";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            bindings
                = <&macro_press &kp LCTRL &kp LSHFT &kp ESC>
                , <&macro_release &kp LCTRL &kp LSHFT &kp ESC>
                ; 
        };
        panic: ctrl_alt_del {
            label = "PANIC";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            bindings
                = <&macro_press &kp LCTRL &kp LALT &kp DEL>
                , <&macro_release &kp LCTRL &kp LALT &kp DEL>
                ; 
        };
    };

    combos {
        compatible = "zmk,combos";
        combo_gui {
            timeout-ms = <50>;
            key-positions = <36 37>;
            bindings = <&kp LGUI>;
        };
        combo_lyr {
            timeout-ms = <50>;
            key-positions = <40 41>;
            bindings = <&to 3>;
        };        
    };

    behaviors {
        dbspc: del_backspace {
            compatible = "zmk,behavior-mod-morph";
            label = "SHIFT_BACKSPACE_DELETE";
            #binding-cells = <0>;
            bindings = <&kp BSPC>, <&kp DEL>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        shftcap: shift_caps {
            compatible = "zmk,behavior-mod-morph";
            label = "SHIFT_CAPS";
            #binding-cells = <0>;
            bindings = <&sk LSHIFT>, <&kp CAPSLOCK>;
            mods = <(MOD_LALT)>;
        };
        shflyr1: shift_layer1 {
            compatible = "zmk,behavior-mod-morph";
            label = "SHIFT_LAYER1";
            #binding-cells = <0>;
            bindings = <&mo 1>, <&to 1>;
            mods = <(MOD_LSFT|MOD_RSFT)>; 
        };
        shflyr2: shift_layer2 {
            compatible = "zmk,behavior-mod-morph";
            label = "SHIFT_LAYER2";
            #binding-cells = <0>;
            bindings = <&mo 2>, <&to 2>;
            mods = <(MOD_LSFT|MOD_RSFT)>; 
        };
    };

        keymap {
                compatible = "zmk,keymap";

                default_layer {
// layer 0
// --------------------------------------------------------------------------------------
//  | TAB  |  '  |  ,  |  .  |  p   |  y  |          |  f  | g  | c  |  r  |  l  | /    |
//  | BKSP |  a  |  o  |  e  |  u   |  i  |          |  d  | h  | t  |  n  |  s  | ENT  |
//  | SHFT |  ;  |  q  |  j  |  k   |  x  |          |  b  | m  | w  |  v  |  z  | SHFT |
//                     | ALT | CTRL | ESC |          | SPC | L2 | L1 |
                        bindings = <
 &kp TAB   &kp SQT  &kp COMMA &kp DOT  &kp P     &kp Y              &kp F     &kp G &kp C &kp R &kp L &kp SLASH
 &dbspc    &kp A    &kp O     &kp E    &kp U     &kp I              &kp D     &kp H &kp T &kp N &kp S &kp RET
 &shftcap  &kp SEMI &kp Q     &kp J    &kp K     &kp X              &kp B     &kp M &kp W &kp V &kp Z &shftcap
                              &kp LALT &kp LCTRL &gresc             &kp SPACE &mo 2 &mo 1

// querty alt
// &kp TAB &kp Q &kp W &kp E &kp R &kp T &kp Y &kp U &kp I &kp O &kp P &kp LBRC
// &dbspc &kp A &kp S &kp D &kp F &kp G &kp H &kp J &kp K &kp L &kp SEMI &kp RET
// &shftcap &kp Z &kp X &kp C &kp V &kp B &kp N &kp M &kp COMMA &kp DOT &kp SLASH &shftcap
// &kp LALT &kp LCTRL &gresc &kp SPACE &mo 2 &mo 1

                        >;
                };

                lower_layer {
// layer 1
// ----------------------------------------------------------------------------------------
// | TAB  |  !   |  @  |  #   | $    | %   |          | ^   | &  | *  |  (  |  )  | -     |
// | BKSP |  1   |  2  |  3   | 4    | 5   |          | 6   | 7  | 8  |  9  |  0  | ENT   |
// | SHFT |  F1  |  F2 |  F3  | .    | F5  |          | F6  | F7 | F8 |  F9 | F10 | SHIFT |
//                     | ALT  | CTRL | SPC |          | SPC |    |    |
                        bindings = <
   &kp TAB   &kp EXCL &kp AT &kp HASH &kp DLLR  &kp PERCENT          &kp CARET &kp AMPS &kp STAR &kp LPAR  &kp RPAR &kp MINUS
   &dbspc    &kp N1   &kp N2 &kp N3   &kp N4    &kp N5               &kp N6    &kp N7   &kp N8   &kp N9    &kp N0   &kp RET
   &shftcap  &trans   &trans &trans   &kp DOT   &trans               &trans    &trans   &trans   &trans    &trans   &shftcap
                             &kp LALT &kp LCTRL &kp SPACE            &kp SPACE &trans   &trans
                        >;
                };

                raise_layer {
// layer 2
// ----------------------------------------------------------------------------------------------
// | TAB   |   !     |  @  |  UP  |  $   |  %     |          | ^   |  /  |  \  |  [  | ]  | "|" |
// | BKSP  | HOME    | LFT | DOWN | RGT  | END    |          | =   |  <  |  >  |  (  | )  | ENT |
// | SHIFT | scrnlft |  ~  | #    | .    | scrnrt |          | +   |  -  |  _  |  {  | }  | &   |
//                         | LGUI  | CTRL | SPC    |          | SPC |     |     |
                        bindings = <
  &kp TAB  &kp EXCL &kp AT    &kp UP   &kp DLLR  &kp PERCENT         &kp CARET &kp SLASH &kp BACKSLASH &kp LBKT &kp RBKT &kp PIPE 
  &dbspc   &kp HOME &kp LEFT  &kp DOWN &kp RIGHT &kp END             &kp EQUAL &kp LT    &kp GT        &kp LPAR &kp RPAR &kp RET
  &shftcap &scrnlft &kp TILDE &kp HASH &kp DOT   &scrnrt             &kp PLUS  &kp MINUS &kp UNDER     &kp LBRC &kp RBRC &kp AMPS 
                              &kp LGUI &kp LCTRL &kp SPACE           &kp SPACE &trans    &trans
                        >;
                };
                
                function_layer {
// layer 3
// ----------------------------------------------------------------------------------------------
// | CTRL + SHFT + ESC | F1 | F2  | F3  | F4  | PSE  |          | PLY | 7 | 8   | 9 | - | /     |
// | CTRL + ALT + DEL  | F5 | F6  | F7  | F8  | PREV |          | NXT | 4 | 5   | 6 | + | ENT   |
// | SHIFT             | F9 | F10 | F11 | F12 | VDWN |          | VUP | 1 | 2   | 3 | . | SHIFT |
//                                |     |     | ESC  |          | SPC | 0 | to0 |
                        bindings = <
  &taskmngr &kp F1 &kp F2  &kp F3  &kp F4  &kp C_PAUSE         &kp C_PLAY   &kp N7 &kp N8 &kp N9 &kp MINUS &kp SLASH 
  &panic    &kp F5 &kp F6  &kp F7  &kp F8  &kp C_PREV          &kp C_NEXT   &kp N4 &kp N5 &kp N6 &kp PLUS  &kp RET
  &shftcap  &kp F9 &kp F10 &kp F11 &kp F12 &kp C_VOL_DN        &kp C_VOL_UP &kp N1 &kp N2 &kp N3 &kp DOT   &shftcap
                           &trans  &trans  &gresc              &kp SPACE    &kp N0 &to 0
                        >;
                };     
               
        };
};
